@Library('deploy')
import deploy
import com.jenkinsci.plugins.badge.action.BadgeAction
deployLib = new deploy()

githubAppId = '23179'
githubAppCredentialId = 'teampam-ci'
def newApiToken() {
    withEnv(['HTTPS_PROXY=webproxy-internett.nav.no:8088']) {
        withCredentials([file(credentialsId: githubAppCredentialId, variable: 'KEYFILE')]) {
            dir('token') {
                def generatedToken = sh(script: "generate-jwt.sh \$KEYFILE ${githubAppId} | xargs generate-installation-token.sh", returnStdout: true)
                return generatedToken.trim()
            }
        }
    }
}

node {
    def githubAppToken = newApiToken();

//    def app = "stillingsok"
//    def app = "pam-adreg"
    def app = "kandidatsok"

	stage("Initialization") {
        cleanWs()
		withEnv(['HTTPS_PROXY=http://webproxy-utvikler.nav.no:8088']) {
			println("Repository URL is https://x-access-token:****@github.com/navikt/pam-${app}.git")
            sh(script: "set +x; git clone https://x-access-token:${githubAppToken}@github.com/navikt/pam-${app}.git .")
		}
    }

    def qaDir = "${env.WORKSPACE}/qa"
    def qaFolder = new File(qaDir)

    if (qaFolder.exists()) {
		echo "Running functional acceptance tests"
		withEnv(['HTTPS_PROXY=http://webproxy-internett.nav.no:8088', 'HTTP_PROXY=http://webproxy-internett.nav.no:8088', 'NO_PROXY=localhost,127.0.0.1,maven.adeo.no,oera.no', 'NODE_TLS_REJECT_UNAUTHORIZED=0', 'PORT=8081']) {
			sh "cd ${qaDir} && npm i -D"
		}
		sauce('sauceconnect') {
			sauceconnect(options: '--proxy webproxy-internett.nav.no:8088 --proxy-tunnel --tunnel-identifier jenkins-pam-kandidatsok --se-port 4445', useLatestSauceConnect: true) {
				stage("Chrome") {
					acceptanceTests(qaDir, "chrome")
				}
				stage("Edge & Internet Explorer") {
					acceptanceTests(qaDir, "edge-ie")
				}
				stage("Safari") {
					acceptanceTests(qaDir, "safari")
				}
			}
		}
	}
}

def acceptanceTests(qaDir, script) {
	try {
		sh "cd ${qaDir} && npm run-script sauce-jenkins-${script} -- --tag elastic --skiptags ignore"
	} catch (Exception e) {
		error '1 eller flere tester feilet'
	} finally {
	    sh "cd ${qaDir} && npm run-script cucumber-report "
    	publishHTML([allowMissing: false, alwaysLinkToLastBuild: true, keepAll: false, reportDir: 'qa/reports', reportFiles: 'cucumber_report.html', reportName: "Report ${script}"])
	}
}
