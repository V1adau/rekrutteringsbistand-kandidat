@Library('deploy')
import deploy

def deployLib = new deploy()

node {
    def commitHashShort, committer, releaseVersion

    def app = "pam-kandidatsok-veileder"
    def repo = "pam-kandidatsok"
    def appConfig = "nais_veileder.yaml"
    def dockerRepo = "repo.adeo.no:5443"
    def groupId = "nais"
    def environment = 'q6'
    def zone = 'fss'
    def namespace = "q6"
    def contextroots = [app]

    stage("checkout") {
        deleteDir()
        checkout scm

        commitHashShort = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
        committer = sh(script: 'git log -1 --pretty=format:"%an"', returnStdout: true).trim()

        releaseVersion = "0.0.${env.BUILD_NUMBER}-${commitHashShort}"

        echo "release version: ${releaseVersion}"
    }

    stage("npm install") {
        withEnv(['HTTPS_PROXY=http://webproxy-utvikler.nav.no:8088', 'HTTP_PROXY=http://webproxy-utvikler.nav.no:8088', 'NO_PROXY=localhost,127.0.0.1,maven.adeo.no', 'NODE_TLS_REJECT_UNAUTHORIZED=0', 'PORT=8081']) {
            sh "npm install"
        }
    }

    stage("Build") {
        sh "npm run build-veileder"
        sh "docker build --build-arg version=${releaseVersion} --build-arg app_name=${app} -t ${dockerRepo}/${app}:${releaseVersion} -f Dockerfile_veileder ."
    }

    stage("Publish") {
        withCredentials([usernamePassword(credentialsId: 'nexusUploader', usernameVariable: 'NEXUS_USERNAME', passwordVariable: 'NEXUS_PASSWORD')]) {
            sh "docker login -u ${env.NEXUS_USERNAME} -p ${env.NEXUS_PASSWORD} ${dockerRepo} && docker push ${dockerRepo}/${app}:${releaseVersion}"
            sh "curl --user ${env.NEXUS_USERNAME}:${env.NEXUS_PASSWORD} --upload-file ${appConfig} https://repo.adeo.no/repository/raw/nais/${app}/${releaseVersion}/nais.yaml"
        }
    }

    stage('Deploy to preprod') {
        callback = "${env.BUILD_URL}input/Deploy/"
        def deploy = deployLib.deployNaisApp(app, releaseVersion, environment, zone, namespace, callback, committer, true).key
        try {
            timeout(time: 15, unit: 'MINUTES') {
                input id: 'deploy', message: "Check status here:  https://jira.adeo.no/browse/${deploy}"
            }
        } catch (Exception e) {
            throw new Exception("Deploy feilet :( \n Se https://jira.adeo.no/browse/" + deploy + " for detaljer", e)
        }

    }

    stage('Tag GitHub release') {
        withEnv(['HTTPS_PROXY=http://webproxy-utvikler.nav.no:8088']) {
            withCredentials([string(credentialsId: 'navikt-ci-oauthtoken', variable: 'token')]) {
                sh ("git tag -a ${releaseVersion} -m ${app}-${releaseVersion}")
                sh ("git push -u https://${token}:x-oauth-basic@github.com/navikt/${repo}.git --tags")
            }
        }
    }
}
